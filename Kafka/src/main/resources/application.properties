spring.application.name=kafka-app

# Kafka Configuration
spring.kafka.bootstrap-servers=localhost:9092

# Kafka Producer Configuration
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# Kafka Consumer Configuration
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.group-id=default-app-group # Default group ID for consumers
# Individual listeners can override the group ID, like TrendAnalyzer does.

# Optional: Auto-create topics (not recommended for production)
# spring.kafka.admin.auto-create=true
# For this exercise, we assume the topic 'stock.price.update' will be created manually or by a script if needed.
# The provided docker-compose might create it or allow auto-creation.

# Logging levels (optional, can be useful for debugging)
logging.level.org.springframework.kafka=INFO
logging.level.org.apache.kafka=INFO
logging.level.io.github.etr.courses.kafka=DEBUG
